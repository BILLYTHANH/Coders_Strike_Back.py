import sys
import math


c=0
d=10
b=0
x1=1000
y1=1000

def distance(x1, y1, x2, y2):
    dist =  math.sqrt(math.pow((x1 - x2),2) + math.pow((y1 - y2),2))
    return dist

class Point(object):
    """ Point class: Reprepsents a point in the x, y, z space. """

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
        
    def __repr__(self):
        return '{0}({1}, {2}, {3})'.format(self.__class__.__name__, self.x,
                                           self.y, self.z)

    def substract(self, point):
        """ Return a Point instance as the displacement of two points. """
        return Point(point.x - self.x, point.y - self.y, point.z - self.z)

    @classmethod
    def from_list(cls, l):
        """ Return a Point instance from a given list """

        x, y, z = map(float, l)
        return cls(x, y, z)

class Vector(Point):
    """ Vector class: Represents a vector in the x, y, z space. """

    def __init__(self, x, y, z): 
        self.vector = [x, y, z]
        super(Vector, self).__init__(x, y, z)        

    def multiply(self, number):
        """ Return a Vector instance as the product of the vector and a real
            number. """

        return self.from_list([x * number for x in self.vector])

    def magnitude(self):
        """ Return magnitude of the vector. """

        return (math.sqrt(reduce(lambda x, y: x + y,[x ** 2 for x in self.vector])))

    def sum(self, vector):
        """ Return a Vector instance as the vector sum of two vectors. """

        return (self.from_list([x + vector.vector[self.vector.index(x)]
                                for x in self.vector]))

    def substract(self, vector):
        """ Return a Vector instance as the vector difference of two vectors.
        """

        return (self.from_list([vector.vector[self.vector.index(x)] - x for x in
                                self.vector]))

    def dot(self, vector, theta=None):
        """ Return the dot product of two vectors. If theta is given then the
        dot product is computed as v1*v1 = |v1||v2|cos(theta). Argument theta
        is measured in degrees. """

        if theta is not None:
            
            return (self.magnitude() * vector.magnitude() *math.degrees(math.cos(theta)))
            
        return (reduce(lambda x, y: x + y,[x * vector.vector[self.vector.index(x)]for x in self.vector]))


    def cross(self, vector):
        """ Return a Vector instance as the cross product of two vectors """

        return Vector((self.y * vector.z - self.z * vector.y),
                      (self.z * vector.x - self.x * vector.z),
                      (self.x * vector.y - self.y * vector.x))

    def angle(self, vector):
        """ Return the angle between two vectors in degrees. """

        return (math.degrees(math.acos((self.dot(vector) / (self.magnitude() *
                                                            vector.magnitude())))))

    def parallel(self, vector):
        """ Return True if vectors are parallel to each other. """

        if self.cross(vector).magnitude() == 0:
            return True
        return False

    def perpendicular(self, vector):
        """ Return True if vectors are perpendicular to each other. """

        if self.dot(vector) == 0:
            return True
        return False

    def non_parallel(self, vector):
        """ Return True if vectors are non-parallel. Non-parallel vectors are
            vectors which are neither parallel nor perpendicular to each other.
        """

        if (self.is_parallel(vector) is not True and
                    self.is_perpendicular(vector) is not True):
            return True
        return False

    @classmethod
    def from_points(cls, point1, point2):
        """ Return a Vector instance from two given points. """

        if isinstance(point1, Point) and isinstance(point2, Point):
            displacement = point1.substract(point2)
            return cls(displacement.x, displacement.y, displacement.z)
        raise TypeError

while True:
    
    shield = False
    x, y, next_checkpoint_x, next_checkpoint_y, next_checkpoint_dist, next_checkpoint_angle = [int(i) for i in input().split()]
    opponent_x, opponent_y = [int(i) for i in input().split()]

#vitesse
    next_checkpoint_angle = abs(next_checkpoint_angle)
    if next_checkpoint_angle > 90:
        thrust = 0
    
    elif next_checkpoint_angle < 5 and c == 0 and next_checkpoint_dist > 6000:
        thrust = "BOOST"
        shield = True
        c = 1
        
    else:
        if next_checkpoint_dist > 2000:
            thrust = 100
        elif next_checkpoint_dist < 2000:
            thrust = abs(round(next_checkpoint_dist/200)*10)
            
#bouclier
    
    if distance(x,y,opponent_x,opponent_y) <= 950 and b == 20:
            thrust = "SHIELD"
            shield = True
            b = b+1
            
#direction

    from_p = Vector(x1,y1,0)
    to = Vector(x,y,0)
    mov = from_p.substract(to)
    target = Vector(next_checkpoint_x,next_checkpoint_y,0)
    if mov.x >10000:
        correction = target
    else:
        correction = target.sum(mov.multiply(-1))

    x1=x
    y1=y
    
    print(str(next_checkpoint_x) + " " + str(next_checkpoint_y) + " {0}".format(thrust))

